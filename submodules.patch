Submodule submodules/TgVoip/libtgvoip contains modified content
diff --git a/submodules/TgVoip/libtgvoip/logging.h b/submodules/TgVoip/libtgvoip/logging.h
index 2ddae18..14f4b6a 100644
--- a/submodules/TgVoip/libtgvoip/logging.h
+++ b/submodules/TgVoip/libtgvoip/logging.h
@@ -35,11 +35,11 @@ void tgvoip_log_file_write_header(FILE* file);
 
 #include "os/darwin/TGLogWrapper.h"
 
-#define LOGV(msg, ...) {__tgvoip_call_tglog("V/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('V', msg, ##__VA_ARGS__);}
-#define LOGD(msg, ...) {__tgvoip_call_tglog("D/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('D', msg, ##__VA_ARGS__);}
-#define LOGI(msg, ...) {__tgvoip_call_tglog("I/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('I', msg, ##__VA_ARGS__);}
-#define LOGW(msg, ...) {__tgvoip_call_tglog("W/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('W', msg, ##__VA_ARGS__);}
-#define LOGE(msg, ...) {__tgvoip_call_tglog("E/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('E', msg, ##__VA_ARGS__);}
+#define LOGV(msg, ...) {__tgvoip_call_tglog(__FILE__, __FUNCTION__, __LINE__, "V/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('V', msg, ##__VA_ARGS__);}
+#define LOGD(msg, ...) {__tgvoip_call_tglog(__FILE__, __FUNCTION__, __LINE__, "D/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('D', msg, ##__VA_ARGS__);}
+#define LOGI(msg, ...) {__tgvoip_call_tglog(__FILE__, __FUNCTION__, __LINE__, "I/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('I', msg, ##__VA_ARGS__);}
+#define LOGW(msg, ...) {__tgvoip_call_tglog(__FILE__, __FUNCTION__, __LINE__, "W/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('W', msg, ##__VA_ARGS__);}
+#define LOGE(msg, ...) {__tgvoip_call_tglog(__FILE__, __FUNCTION__, __LINE__, "E/tgvoip: " msg, ##__VA_ARGS__); tgvoip_log_file_printf('E', msg, ##__VA_ARGS__);}
 
 #elif defined(_WIN32) && defined(_DEBUG)
 
diff --git a/submodules/TgVoip/libtgvoip/os/darwin/SetupLogging.h b/submodules/TgVoip/libtgvoip/os/darwin/SetupLogging.h
index ad10754..960fc9e 100644
--- a/submodules/TgVoip/libtgvoip/os/darwin/SetupLogging.h
+++ b/submodules/TgVoip/libtgvoip/os/darwin/SetupLogging.h
@@ -1,3 +1,3 @@
 #import <Foundation/Foundation.h>
 
-extern void (*TGVoipLoggingFunction)(NSString *);
+extern void (*TGVoipLoggingFunction)(const char *, const char *, int, NSString *, va_list args);
diff --git a/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.h b/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.h
index 289577e..26d7870 100644
--- a/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.h
+++ b/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.h
@@ -11,7 +11,7 @@
 extern "C" {
 #endif
 
-void __tgvoip_call_tglog(const char* format, ...);
+void __tgvoip_call_tglog(const char * filename, const char * functionName, int lineNumber, const char* format, ...);
 
 #if defined __cplusplus
 };
diff --git a/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.m b/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.m
index 4739ec8..0e65b59 100644
--- a/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.m
+++ b/submodules/TgVoip/libtgvoip/os/darwin/TGLogWrapper.m
@@ -1,13 +1,14 @@
 #import <Foundation/Foundation.h>
 
-void (*TGVoipLoggingFunction)(NSString *) = NULL;
+void (*TGVoipLoggingFunction)(const char *, const char *, int, NSString *, va_list args) = NULL;
 
-void __tgvoip_call_tglog(const char* format, ...){
+void __tgvoip_call_tglog(const char * filename, const char * functionName, int lineNumber, const char* format, ...){
 	va_list args;
 	va_start(args, format);
-    NSString *string = [[NSString alloc] initWithFormat:[[NSString alloc]initWithUTF8String:format] arguments:args];
-	va_end(args);
+
     if (TGVoipLoggingFunction) {
-        TGVoipLoggingFunction(string);
+        TGVoipLoggingFunction(filename, functionName, lineNumber, [[NSString alloc] initWithUTF8String:format], args);
     }
+
+    va_end(args);
 }
Submodule submodules/TgVoipWebrtc/tgcalls contains modified content
diff --git a/submodules/TgVoipWebrtc/tgcalls/tgcalls/InstanceImpl.cpp b/submodules/TgVoipWebrtc/tgcalls/tgcalls/InstanceImpl.cpp
index 0abdecd..9bd58ea 100644
--- a/submodules/TgVoipWebrtc/tgcalls/tgcalls/InstanceImpl.cpp
+++ b/submodules/TgVoipWebrtc/tgcalls/tgcalls/InstanceImpl.cpp
@@ -26,9 +26,9 @@ rtc::Thread *getManagerThread() {
 
 InstanceImpl::InstanceImpl(Descriptor &&descriptor)
 : _logSink(std::make_unique<LogSinkImpl>(descriptor.config)) {
-    rtc::LogMessage::LogToDebug(rtc::LS_INFO);
+    rtc::LogMessage::LogToDebug(rtc::LS_VERBOSE);
     rtc::LogMessage::SetLogToStderr(false);
-	rtc::LogMessage::AddLogToStream(_logSink.get(), rtc::LS_INFO);
+	rtc::LogMessage::AddLogToStream(_logSink.get(), rtc::LS_VERBOSE);
     
     auto networkType = descriptor.initialNetworkType;
 
diff --git a/submodules/TgVoipWebrtc/tgcalls/tgcalls/LogSinkImpl.cpp b/submodules/TgVoipWebrtc/tgcalls/tgcalls/LogSinkImpl.cpp
index 77755c3..f49bb54 100644
--- a/submodules/TgVoipWebrtc/tgcalls/tgcalls/LogSinkImpl.cpp
+++ b/submodules/TgVoipWebrtc/tgcalls/tgcalls/LogSinkImpl.cpp
@@ -11,6 +11,21 @@
 
 namespace tgcalls {
 
+std::string _everityString(rtc::LoggingSeverity severity) {
+    switch (severity) {
+        case rtc::LS_VERBOSE:
+            return "[V]";
+        case rtc::LS_INFO:
+            return "[I]";
+        case rtc::LS_WARNING:
+            return "[W]";
+        case rtc::LS_ERROR:
+            return "[E]";
+        default:
+            return "";
+    }
+}
+
 LogSinkImpl::LogSinkImpl(const Config &config) {
 	if (!config.logPath.empty()) {
 		_file.open(config.logPath);
@@ -18,11 +33,11 @@ LogSinkImpl::LogSinkImpl(const Config &config) {
 }
 
 void LogSinkImpl::OnLogMessage(const std::string &msg, rtc::LoggingSeverity severity, const char *tag) {
-	OnLogMessage(std::string(tag) + ": " + msg);
+	OnLogMessage(std::string(tag) + ": " + _everityString(severity) + " " + msg);
 }
 
 void LogSinkImpl::OnLogMessage(const std::string &message, rtc::LoggingSeverity severity) {
-	OnLogMessage(message);
+	OnLogMessage(_everityString(severity) + " " + message);
 }
 
 void LogSinkImpl::OnLogMessage(const std::string &message) {
@@ -66,7 +81,7 @@ void LogSinkImpl::OnLogMessage(const std::string &message) {
 		<< " " << message;
     
 #if DEBUG
-    printf("%d-%d-%d %d:%d:%d:%d %s\n", timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, milliseconds, message.c_str());
+    printf("%d-%d-%d %d:%d:%d:%d (VOIP) %s\n", timeinfo.tm_year + 1900, timeinfo.tm_mon + 1, timeinfo.tm_mday, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, milliseconds, message.c_str());
 #endif
 }
 
diff --git a/submodules/TgVoipWebrtc/tgcalls/tgcalls/MediaManager.cpp b/submodules/TgVoipWebrtc/tgcalls/tgcalls/MediaManager.cpp
index 2b3f580..3c57abb 100644
--- a/submodules/TgVoipWebrtc/tgcalls/tgcalls/MediaManager.cpp
+++ b/submodules/TgVoipWebrtc/tgcalls/tgcalls/MediaManager.cpp
@@ -388,7 +388,16 @@ void MediaManager::collectStats() {
 		_signalBarsUpdated((int)(adjustedQuality * signalBarsNorm));
 	}
 
-    _bitrateRecords.push_back(CallStatsBitrateRecord { (int32_t)(rtc::TimeMillis() / 1000), stats.send_bandwidth_bps / 1000 });
+    _bitrateRecords.push_back(CallStatsBitrateRecord {
+        .timestamp=(int32_t)(rtc::TimeMillis() / 1000),
+        .bitrate=stats.send_bandwidth_bps / 1000,
+        // bo hack, log more stats
+        .send_bandwidth_bps = stats.send_bandwidth_bps,       // Estimated available send bandwidth.
+        .max_padding_bitrate_bps = stats.max_padding_bitrate_bps,  // Cumulative configured max padding.
+        .recv_bandwidth_bps = stats.recv_bandwidth_bps,       // Estimated available receive bandwidth.
+        .pacer_delay_ms = stats.pacer_delay_ms,
+        .rtt_ms = stats.rtt_ms
+    });
 
     beginStatsTimer(2000);
 }
diff --git a/submodules/TgVoipWebrtc/tgcalls/tgcalls/Stats.h b/submodules/TgVoipWebrtc/tgcalls/tgcalls/Stats.h
index fc0040b..f989ea4 100644
--- a/submodules/TgVoipWebrtc/tgcalls/tgcalls/Stats.h
+++ b/submodules/TgVoipWebrtc/tgcalls/tgcalls/Stats.h
@@ -17,6 +17,13 @@ struct CallStatsNetworkRecord {
 struct CallStatsBitrateRecord {
     int32_t timestamp = 0;
     int32_t bitrate = 0;
+
+    // copied from webrtc::Call::Stats
+    int send_bandwidth_bps = 0;       // Estimated available send bandwidth.
+    int max_padding_bitrate_bps = 0;  // Cumulative configured max padding.
+    int recv_bandwidth_bps = 0;       // Estimated available receive bandwidth.
+    int64_t pacer_delay_ms = 0;
+    int64_t rtt_ms = -1;
 };
 
 struct CallStats {
Submodule third-party/webrtc/webrtc-ios contains modified content
diff --git a/third-party/webrtc/webrtc-ios/src/build/mac/find_sdk.py b/third-party/webrtc/webrtc-ios/src/build/mac/find_sdk.py
index 38c28832..44cb85c0 100755
--- a/third-party/webrtc/webrtc-ios/src/build/mac/find_sdk.py
+++ b/third-party/webrtc/webrtc-ios/src/build/mac/find_sdk.py
@@ -88,7 +88,7 @@ def main():
     raise SdkError('Install Xcode, launch it, accept the license ' +
       'agreement, and run `sudo xcode-select -s /path/to/Xcode.app` ' +
       'to continue.')
-  sdks = [re.findall('^MacOSX(10\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
+  sdks = [re.findall('^MacOSX(1[01]\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
   sdks = [s[0] for s in sdks if s]  # [['10.5'], ['10.6']] => ['10.5', '10.6']
   sdks = [s for s in sdks  # ['10.5', '10.6'] => ['10.6']
           if parse_version(s) >= parse_version(min_sdk_version)]
diff --git a/third-party/webrtc/webrtc-ios/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm b/third-party/webrtc/webrtc-ios/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
index 52697670..af183e82 100644
--- a/third-party/webrtc/webrtc-ios/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
+++ b/third-party/webrtc/webrtc-ios/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
@@ -37,7 +37,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceBool: {
         std::vector<bool> sequence = *member->cast_to<RTCStatsMember<std::vector<bool>>>();
         NSMutableArray *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithBool:item]];
         }
         return [array copy];
@@ -61,7 +61,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceInt64: {
         std::vector<int64_t> sequence = *member->cast_to<RTCStatsMember<std::vector<int64_t>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithLong:item]];
         }
         return [array copy];
@@ -69,7 +69,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceUint64: {
         std::vector<uint64_t> sequence = *member->cast_to<RTCStatsMember<std::vector<uint64_t>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithUnsignedLong:item]];
         }
         return [array copy];
@@ -77,7 +77,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceDouble: {
         std::vector<double> sequence = *member->cast_to<RTCStatsMember<std::vector<double>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithDouble:item]];
         }
         return [array copy];
diff --git a/third-party/webrtc/webrtc-ios/src/stats/rtc_stats.cc b/third-party/webrtc/webrtc-ios/src/stats/rtc_stats.cc
index b8e9633f..481516a3 100644
--- a/third-party/webrtc/webrtc-ios/src/stats/rtc_stats.cc
+++ b/third-party/webrtc/webrtc-ios/src/stats/rtc_stats.cc
@@ -27,7 +27,7 @@ std::string VectorToString(const std::vector<T>& vector) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : vector) {
+  for (const T element : vector) {
     sb << separator << rtc::ToString(element);
     separator = ",";
   }
@@ -42,7 +42,7 @@ std::string VectorOfStringsToString(const std::vector<T>& strings) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : strings) {
+  for (const T &element : strings) {
     sb << separator << "\"" << rtc::ToString(element) << "\"";
     separator = ",";
   }
@@ -66,7 +66,7 @@ std::string VectorToStringAsDouble(const std::vector<T>& vector) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : vector) {
+  for (const T element : vector) {
     sb << separator << ToStringAsDouble<T>(element);
     separator = ",";
   }
diff --git a/third-party/webrtc/webrtc-ios/src/third_party/abseil-cpp/absl/strings/str_cat.cc b/third-party/webrtc/webrtc-ios/src/third_party/abseil-cpp/absl/strings/str_cat.cc
index d9afe2f3..c266f4ba 100644
--- a/third-party/webrtc/webrtc-ios/src/third_party/abseil-cpp/absl/strings/str_cat.cc
+++ b/third-party/webrtc/webrtc-ios/src/third_party/abseil-cpp/absl/strings/str_cat.cc
@@ -141,12 +141,12 @@ namespace strings_internal {
 std::string CatPieces(std::initializer_list<absl::string_view> pieces) {
   std::string result;
   size_t total_size = 0;
-  for (const absl::string_view piece : pieces) total_size += piece.size();
+  for (const absl::string_view &piece : pieces) total_size += piece.size();
   strings_internal::STLStringResizeUninitialized(&result, total_size);
 
   char* const begin = &result[0];
   char* out = begin;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     const size_t this_size = piece.size();
     if (this_size != 0) {
       memcpy(out, piece.data(), this_size);
@@ -170,7 +170,7 @@ void AppendPieces(std::string* dest,
                   std::initializer_list<absl::string_view> pieces) {
   size_t old_size = dest->size();
   size_t total_size = old_size;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     ASSERT_NO_OVERLAP(*dest, piece);
     total_size += piece.size();
   }
@@ -178,7 +178,7 @@ void AppendPieces(std::string* dest,
 
   char* const begin = &(*dest)[0];
   char* out = begin + old_size;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     const size_t this_size = piece.size();
     if (this_size != 0) {
       memcpy(out, piece.data(), this_size);
