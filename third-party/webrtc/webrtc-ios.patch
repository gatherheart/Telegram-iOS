diff --git a/src/build/mac/find_sdk.py b/src/build/mac/find_sdk.py
index 38c28832..44cb85c0 100755
--- a/src/build/mac/find_sdk.py
+++ b/src/build/mac/find_sdk.py
@@ -88,7 +88,7 @@ def main():
     raise SdkError('Install Xcode, launch it, accept the license ' +
       'agreement, and run `sudo xcode-select -s /path/to/Xcode.app` ' +
       'to continue.')
-  sdks = [re.findall('^MacOSX(10\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
+  sdks = [re.findall('^MacOSX(1[01]\.\d+)\.sdk$', s) for s in os.listdir(sdk_dir)]
   sdks = [s[0] for s in sdks if s]  # [['10.5'], ['10.6']] => ['10.5', '10.6']
   sdks = [s for s in sdks  # ['10.5', '10.6'] => ['10.6']
           if parse_version(s) >= parse_version(min_sdk_version)]
diff --git a/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm b/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
index 52697670..af183e82 100644
--- a/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
+++ b/src/sdk/objc/api/peerconnection/RTCStatisticsReport.mm
@@ -37,7 +37,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceBool: {
         std::vector<bool> sequence = *member->cast_to<RTCStatsMember<std::vector<bool>>>();
         NSMutableArray *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithBool:item]];
         }
         return [array copy];
@@ -61,7 +61,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceInt64: {
         std::vector<int64_t> sequence = *member->cast_to<RTCStatsMember<std::vector<int64_t>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithLong:item]];
         }
         return [array copy];
@@ -69,7 +69,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceUint64: {
         std::vector<uint64_t> sequence = *member->cast_to<RTCStatsMember<std::vector<uint64_t>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithUnsignedLong:item]];
         }
         return [array copy];
@@ -77,7 +77,7 @@ NSObject *ValueFromStatsMember(const RTCStatsMemberInterface *member) {
       case RTCStatsMemberInterface::kSequenceDouble: {
         std::vector<double> sequence = *member->cast_to<RTCStatsMember<std::vector<double>>>();
         NSMutableArray<NSNumber *> *array = [NSMutableArray arrayWithCapacity:sequence.size()];
-        for (const auto &item : sequence) {
+        for (const auto item : sequence) {
           [array addObject:[NSNumber numberWithDouble:item]];
         }
         return [array copy];
diff --git a/src/stats/rtc_stats.cc b/src/stats/rtc_stats.cc
index b8e9633f..481516a3 100644
--- a/src/stats/rtc_stats.cc
+++ b/src/stats/rtc_stats.cc
@@ -27,7 +27,7 @@ std::string VectorToString(const std::vector<T>& vector) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : vector) {
+  for (const T element : vector) {
     sb << separator << rtc::ToString(element);
     separator = ",";
   }
@@ -42,7 +42,7 @@ std::string VectorOfStringsToString(const std::vector<T>& strings) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : strings) {
+  for (const T &element : strings) {
     sb << separator << "\"" << rtc::ToString(element) << "\"";
     separator = ",";
   }
@@ -66,7 +66,7 @@ std::string VectorToStringAsDouble(const std::vector<T>& vector) {
   rtc::StringBuilder sb;
   sb << "[";
   const char* separator = "";
-  for (const T& element : vector) {
+  for (const T element : vector) {
     sb << separator << ToStringAsDouble<T>(element);
     separator = ",";
   }
diff --git a/src/third_party/abseil-cpp/absl/strings/str_cat.cc b/src/third_party/abseil-cpp/absl/strings/str_cat.cc
index d9afe2f3..c266f4ba 100644
--- a/src/third_party/abseil-cpp/absl/strings/str_cat.cc
+++ b/src/third_party/abseil-cpp/absl/strings/str_cat.cc
@@ -141,12 +141,12 @@ namespace strings_internal {
 std::string CatPieces(std::initializer_list<absl::string_view> pieces) {
   std::string result;
   size_t total_size = 0;
-  for (const absl::string_view piece : pieces) total_size += piece.size();
+  for (const absl::string_view &piece : pieces) total_size += piece.size();
   strings_internal::STLStringResizeUninitialized(&result, total_size);
 
   char* const begin = &result[0];
   char* out = begin;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     const size_t this_size = piece.size();
     if (this_size != 0) {
       memcpy(out, piece.data(), this_size);
@@ -170,7 +170,7 @@ void AppendPieces(std::string* dest,
                   std::initializer_list<absl::string_view> pieces) {
   size_t old_size = dest->size();
   size_t total_size = old_size;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     ASSERT_NO_OVERLAP(*dest, piece);
     total_size += piece.size();
   }
@@ -178,7 +178,7 @@ void AppendPieces(std::string* dest,
 
   char* const begin = &(*dest)[0];
   char* out = begin + old_size;
-  for (const absl::string_view piece : pieces) {
+  for (const absl::string_view &piece : pieces) {
     const size_t this_size = piece.size();
     if (this_size != 0) {
       memcpy(out, piece.data(), this_size);
